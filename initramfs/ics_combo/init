#!/ics_rec_init/sbin/busybox sh
#
# PURPOSE 
# ONE KERNEL IMAGE WITH ONE INITRAMFS FLASHABLE WITH HEIMDALL/ODIN 
#
# AUTHORS
# Stratosk: http://forum.xda-developers.com/showthread.php?t=1468795
# Mialwe: http://forum.xda-developers.com/showthread.php?t=1551410
#
# BACKGROUND
# CM9 currently uses an init system with two separate initramfs
# images which are packed into the kernel image at compile time.
# During every boot process the needed initramfs image (recovery
# or Android) gets extracted and the boot process continues using 
# the freshly extracted initramfs. A CWM zip has to be used to 
# install the kernel and it's modules/support files.
#
# With this initscript there will be one initramfs only, without
# the need to pack/extract anything and a reduced risk for 
# boot issues resulting from this processes. Additionally the
# generated kernel image can be flashed directly via Heimdall/Odin.
# 
# ORIGINAL SOURCE 
# CM9: https://github.com/CyanogenMod/android_kernel_samsung_aries
#
# INITRAMFS STRUCTURE:
# /
#  -- /ics_init_recovery        (complete recovery initramfs)
#  -- /ics_init                 (complete Android initramfs)
#  -- /files/modules
#  -- /files/hw/lights.aries.so (BLN)
#  -- init (this script)
#  -- erase_image (binary)
# 


#APP='Semaphore.apk'

export _PATH="$PATH"
export PATH=/

# set busybox location, save busybox as we will move directories
/ics_rec_init/sbin/busybox cp /ics_rec_init/sbin/recovery /busybox
BB="/busybox"

# initialize working dir and log
$BB cd /
$BB date >>boot.txt
exec >>boot.txt 2>&1

$BB rm init

$BB echo "generating mount directories..."
$BB mkdir proc
$BB mkdir sys
$BB mkdir cache
$BB mkdir sdcard
$BB mkdir system
$BB mkdir data

$BB mkdir /dev
$BB mkdir /dev/block

$BB echo "generating device nodes..."
$BB mknod /dev/block/mmcblk0 b 179 0
$BB mknod /dev/block/mmcblk0p1 b 179 1
$BB mknod /dev/block/mmcblk0p2 b 179 2
$BB mknod /dev/block/mtdblock2 b 31 2
$BB mknod /dev/block/mtdblock3 b 31 3

$BB echo "mounting devices..."
$BB mount -t proc proc /proc
$BB mount -t sysfs sysfs /sys
$BB mount -t yaffs2 /dev/block/mtdblock2 /system
$BB mount -t yaffs2 /dev/block/mtdblock3 /cache

KV=`$BB uname -r`
$BB echo "version: $KV"

CUR=`$BB cat /proc/version`
if $BB [ -e /system/last_version ]; then
SAV=`$BB cat /system/last_version`
else
SAV=unknown
fi

#DATE=$(date +%s)
#if $BB [ ! -e /system/devil_lastboot_date ]; then
#	$BB echo $DATE > /system/devil_lastboot_date
#	lastboot_diff=100000	
#else
#	lastboot_diff=`$BB cat /system/devil_lastboot_date`-`$DATE`
#fi


if $BB [ ! -d /system/lib/modules ]; then 
    $BB mkdir /system/lib/modules
    $BB chmod 777 /system/lib/modules
fi

if $BB [ "`/busybox grep $KV /system/lib/modules/ansi_cprng.ko`" ] && [ "$CUR" == "$SAV" ]; then
    $BB echo "kernel files already installed, nothing to do"
else
  if $BB [ "$CUR" != "$SAV" ] ; then
    $BB	echo $CUR > /system/last_version
    $BB echo "moving init.d scripts to /init.d/backup..."
	if $BB [ ! -d "/system/etc/init.d/backup" ] ; then
		$BB mkdir -p /system/etc/init.d/backup;
	fi
    $BB mv /system/etc/init.d/* /system/etc/init.d/backup/
  fi
    $BB echo "copying files to init.d..."
    $BB cp /files/init.d/* /system/etc/init.d/
    $BB echo "updating modules..."

    $BB echo "removing old modules..."

    $BB rm /system/lib/modules/*
    $BB echo "updating modules..."
    $BB cp /files/modules/* /system/lib/modules/

    $BB echo "updating twrp libs..."
    $BB cp /files/lib/* /system/lib/

    $BB echo "updating lights.aries.so..."
    $BB mv /files/hw/* /system/lib/hw/
    $BB chmod 644 /system/lib/hw/lights.aries.so

    $BB mount -t ext4 /dev/block/mmcblk0p2 /data
    if $BB [ -f /data/local/logger.ko ]; then
	$BB echo "found /data/local/logger.ko, updating..."
	$BB cp /system/lib/modules/logger.ko /data/local/logger.ko
    else
	$BB echo "/data/local/logger.ko, not found, skipping..."
    fi
    $BB umount /data
    
    if $BB [ ! -d /system/etc/init.d ]; then 
	$BB echo "making init.d"
	$BB mkdir /system/etc/init.d
	$BB chmod 777 /system/etc/init.d
    fi

fi

# $BB echo $DATE > /system/devil_lastboot_date

$BB echo "command line:"
$BB cat /proc/cmdline

$BB echo "starting bootmode detection..."
if $BB grep -q bootmode=2 /proc/cmdline || 
	$BB grep -q bootmode=9 /proc/cmdline || 
	$BB grep -q bootmode=5 /proc/cmdline; then
    # recovery boot
    $BB echo "found recovery command, preparing boot..."

if $BB [ -e /cache/twrp ] ; then
    $BB echo "moving twrp to /"
    $BB mv /twrp/* /
else
    $BB echo "moving ics_rec_init to /"
    $BB mv /ics_rec_init/* /
    $BB chmod a+x /sbin/nandroid-md5.sh
fi
    $BB echo 0 > /sys/class/power_supply/battery/charging_mode_booting
else
    $BB mv /ics_init/* /

################ apply bigmem at first boot ##################################################################

    $BB mount -t ext4 /dev/block/mmcblk0p2 /data
	bigmem=`$BB cat /data/local/devil/bigmem`
	$BB echo "$bigmem"
	if $BB [ -e /data/local/devil/bigmem ] ; then
	bigmem=`$BB cat /data/local/devil/bigmem`
		if $BB grep -q bootmode=0 /proc/cmdline; then
			if $BB [ "$bigmem" -eq 1 ] || $BB [ "$bigmem" -eq 2 ] ; then
				$BB echo $bigmem > /sys/kernel/bigmem/enable
    				$BB umount /data
				/system/bin/toolbox reboot
			fi
		fi
	fi
    $BB umount /data
##############################################################################################################	

	if $BB grep -q bootmode=3 /proc/cmdline || 
		$BB grep -q bootmode=5 /proc/cmdline; then
    		$BB echo "copying XL_mem libs"
    		$BB mv /files/xl/* /system/lib/
    		$BB echo 1 > /sys/kernel/bigmem/enable

	elif $BB grep -q bootmode=7 /proc/cmdline || 
		$BB grep -q bootmode=9 /proc/cmdline; then
    		$BB echo "copying XL_mem libs"
    		$BB mv /files/xl/* /system/lib/
    		$BB echo 2 > /sys/kernel/bigmem/enable
	else
    		$BB echo "copying cm9 default libs"
    		$BB mv /files/cm/* /system/lib/
	fi
fi

if $BB grep -q 1 /sys/class/power_supply/battery/charging_mode_booting ; then
    # low power mode
    $BB echo "found charging_mode command"
    $BB cp /lpm.rc /init.rc
    $BB rm /init.aries.rc
fi

$BB echo "debug output:"
$BB echo "current /:"
$BB ls -l /
$BB echo "current /system:"
$BB ls -l /system/
#$BB echo "current /cache:"
#$BB ls -l /cache/
$BB echo "current /system/lib/modules:"
$BB ls -l /system/lib/modules/
$BB echo "current /system/lib/hw:"
$BB ls -l /system/lib/hw/

$BB echo "cleaning up..."
$BB umount /sys
$BB umount /proc
$BB umount /system
$BB umount /cache
$BB umount /sdcard
$BB rm -r /files
$BB rm -r /sdcard
#$BB rm /erase_image

# original initramfs directories not needed anymore,
# busybox not needed anymore...
$BB rm -rf /ics_init
$BB rm -rf /ics_rec_init
$BB rm -rf /twrp

$BB date >>boot.txt
$BB rm -fr /dev/*

# finally remove busybox
$BB rm /busybox

export PATH="${_PATH}"
exec /init
